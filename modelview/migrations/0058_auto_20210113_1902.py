# Generated by Django 3.0.4 on 2021-01-13 18:02

import django.contrib.postgres.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('dataedit', '0015_merge_20201106_1249'),
        ('modelview', '0057_auto_20200916_1502'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last name')),
                ('affiliation', models.CharField(max_length=100, null=True, verbose_name='Affiliation')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='Contact (e-mail)')),
            ],
        ),
        migrations.CreateModel(
            name='Publication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Title')),
                ('date', models.DateField()),
                ('citation_reference', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1000), null=True, size=None, verbose_name='Citation reference')),
                ('citation_doi', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1000), null=True, size=None, verbose_name='Citation doi')),
                ('license', models.CharField(choices=[('Academic Free License v3.0', 'Academic Free License v3.0'), ('Apache license 2.0', 'Apache license 2.0'), ('Artistic license 2.0', 'Artistic license 2.0'), ('Boost Software License 1.0', 'Boost Software License 1.0'), ('BSD 2-clause "Simplified" license', 'BSD 2-clause "Simplified" license'), ('BSD 3-clause Clear license', 'BSD 3-clause Clear license'), ('Creative Commons license family', 'Creative Commons license family'), ('Creative Commons Zero v1.0 Universal', 'Creative Commons Zero v1.0 Universal'), ('Creative Commons Attribution 4.0', 'Creative Commons Attribution 4.0'), ('Creative Commons Attribution Share Alike 4.0', 'Creative Commons Attribution Share Alike 4.0'), ('Do What The F*ck You Want To Public License', 'Do What The F*ck You Want To Public License'), ('Educational Community License v2.0', 'Educational Community License v2.0'), ('Eclipse Public License 1.0', 'Eclipse Public License 1.0'), ('European Union Public License 1.1', 'European Union Public License 1.1'), ('GNU Affero General Public License v3.0', 'GNU Affero General Public License v3.0'), ('GNU General Public License family', 'GNU General Public License family'), ('GNU General Public License v2.0', 'GNU General Public License v2.0'), ('GNU General Public License v3.0', 'GNU General Public License v3.0'), ('GNU Lesser General Public License family', 'GNU Lesser General Public License family'), ('GNU Lesser General Public License v2.1', 'GNU Lesser General Public License v2.1'), ('GNU Lesser General Public License v3.0', 'GNU Lesser General Public License v3.0'), ('ISC', 'ISC'), ('LaTeX Project Public License v1.3c', 'LaTeX Project Public License v1.3c'), ('Microsoft Public License', 'Microsoft Public License'), ('MIT', 'MIT'), ('Mozilla Public License 2.0', 'Mozilla Public License 2.0'), ('Open Software License 3.0', 'Open Software License 3.0'), ('PostgreSQL License', 'PostgreSQL License'), ('SIL Open Font License 1.1', 'SIL Open Font License 1.1'), ('University of Illinois/NCSA Open Source License', 'University of Illinois/NCSA Open Source License'), ('The Unlicense', 'The Unlicense'), ('zLib License', 'zLib License'), ("BSD 3-clause 'New' or 'Revised' license", "BSD 3-clause 'New' or 'Revised' license"), ('Other', 'Other'), ('Unknown', 'Unknown')], default='Unknown', help_text='Under which license is the framework published?', max_length=50, verbose_name='License')),
                ('license_other_text', models.CharField(max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Scenario',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000, unique=True, verbose_name='Name')),
                ('abbreviation', models.CharField(max_length=20, verbose_name='Abbreviation')),
                ('definition', models.CharField(blank=True, max_length=200)),
                ('target_driven', models.CharField(blank=True, max_length=200)),
                ('measure_driven', models.CharField(blank=True, max_length=200)),
                ('new_aspects', models.CharField(blank=True, help_text='What is new? (beyond state of research)', max_length=1000, verbose_name='New aspects')),
                ('sensitivities', models.CharField(blank=True, max_length=200)),
                ('scenario_years', models.CharField(blank=True, max_length=200)),
                ('typical_year', models.CharField(blank=True, max_length=200, verbose_name='Weather year, typical year, typical periods')),
                ('territory', models.CharField(blank=True, max_length=200)),
                ('international_transport', models.CharField(blank=True, max_length=200, verbose_name='International transport')),
                ('area_outside', models.CharField(blank=True, max_length=200, verbose_name='Area outside of territory modelled')),
                ('upstream', models.CharField(blank=True, max_length=200, verbose_name='Upstream chains outside the territory included?')),
                ('temporal_resolution', models.CharField(blank=True, max_length=200)),
                ('spatial_resolution', models.CharField(blank=True, max_length=200)),
                ('modeled_energy_sectors_electricity', models.CharField(blank=True, max_length=200)),
                ('modeled_energy_sectors_heat', models.CharField(blank=True, max_length=200)),
                ('modeled_energy_transport', models.CharField(blank=True, max_length=200)),
                ('sector_definition_based_on', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors_energy', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors_industries', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors_manufacturing', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors_tertiary', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors_private', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors_transport', models.CharField(blank=True, max_length=200)),
                ('energy_demand_sectors_other', models.CharField(blank=True, max_length=200)),
                ('sectors_agriculture', models.CharField(blank=True, max_length=200)),
                ('sectors_lulucf', models.CharField(blank=True, max_length=200)),
                ('sectors_waste', models.CharField(blank=True, max_length=200)),
                ('sectors_other', models.CharField(blank=True, max_length=200)),
                ('fuels_fossil', models.CharField(blank=True, max_length=200)),
                ('fuels_nuclear', models.CharField(blank=True, max_length=200)),
                ('fuels_renewable', models.CharField(blank=True, max_length=200)),
                ('fuels_secondary', models.CharField(blank=True, max_length=200)),
                ('fuels_synthetic', models.CharField(blank=True, max_length=200)),
                ('fuels_other', models.CharField(blank=True, max_length=200)),
                ('primary_energy', models.CharField(blank=True, max_length=200)),
                ('final_energy', models.CharField(blank=True, max_length=200)),
                ('other_energy', models.CharField(blank=True, max_length=200)),
                ('energy_producers', models.CharField(blank=True, max_length=200)),
                ('energy_transport', models.CharField(blank=True, max_length=200)),
                ('energy_storages', models.CharField(blank=True, max_length=200)),
                ('energy_consumers', models.CharField(blank=True, max_length=200)),
                ('theoretical_potential', models.CharField(blank=True, max_length=200)),
                ('technical_potential', models.CharField(blank=True, max_length=200)),
                ('economic_potential', models.CharField(blank=True, max_length=200)),
                ('developable_potential', models.CharField(blank=True, max_length=200)),
                ('ef_Greenhouse_gas_emissions', models.CharField(blank=True, max_length=200)),
                ('ef_carbon_dioxide', models.CharField(blank=True, max_length=200)),
                ('ef_methane', models.CharField(blank=True, max_length=200)),
                ('ef_nitrous_oxide', models.CharField(blank=True, max_length=200)),
                ('ef_hydrofluorocarbons', models.CharField(blank=True, max_length=200)),
                ('ef_perfluorocarbons', models.CharField(blank=True, max_length=200)),
                ('ef_sulphur_hexafluoride', models.CharField(blank=True, max_length=200)),
                ('ef_nitrogen_fluoride', models.CharField(blank=True, max_length=200)),
                ('ef_carbon_monoxide', models.CharField(blank=True, max_length=200)),
                ('ef_nitrogen_oxide', models.CharField(blank=True, max_length=200)),
                ('ef_nmvoc', models.CharField(blank=True, max_length=200)),
                ('ef_sulfur_dioxide', models.CharField(blank=True, max_length=200)),
                ('ef_ammonia', models.CharField(blank=True, max_length=200)),
                ('ef_pm', models.CharField(blank=True, max_length=200)),
                ('exogeneous_population', models.CharField(blank=True, max_length=200)),
                ('exogeneous_working_population', models.CharField(blank=True, max_length=200)),
                ('exogeneous_gdp', models.CharField(blank=True, max_length=200)),
                ('exogeneous_gva', models.CharField(blank=True, max_length=200)),
                ('exogeneous_economic_other', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_coal', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_petroleum', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_natural_gas', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_other_primary', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_electricity', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_heat', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_liquid_fuels', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_synthetic_fuels', models.CharField(blank=True, max_length=200)),
                ('exogeneous_prices_energy_other_secondary', models.CharField(blank=True, max_length=200)),
                ('exogeneous_ets', models.CharField(blank=True, max_length=200)),
                ('exogeneous_carbon_prices_other', models.CharField(blank=True, max_length=200)),
                ('exogeneous_investment_cost_producers', models.CharField(blank=True, max_length=200)),
                ('exogeneous_investment_cost_transport', models.CharField(blank=True, max_length=200)),
                ('exogeneous_investment_cost_storage', models.CharField(blank=True, max_length=200)),
                ('exogeneous_investment_cost_other', models.CharField(blank=True, max_length=200)),
                ('endogene_population', models.CharField(blank=True, max_length=200)),
                ('endogene_working_population', models.CharField(blank=True, max_length=200)),
                ('endogene_gdp', models.CharField(blank=True, max_length=200)),
                ('endogene_gva', models.CharField(blank=True, max_length=200)),
                ('endogene_economic_other', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_coal', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_petroleum', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_natural_gas', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_other_primary', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_electricity', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_heat', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_liquid_fuels', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_synthetic_fuels', models.CharField(blank=True, max_length=200)),
                ('endogene_prices_energy_other_secondary', models.CharField(blank=True, max_length=200)),
                ('endogene_ets', models.CharField(blank=True, max_length=200)),
                ('endogene_carbon_prices_other', models.CharField(blank=True, max_length=200)),
                ('endogene_investment_cost_producers', models.CharField(blank=True, max_length=200)),
                ('endogene_investment_cost_transport', models.CharField(blank=True, max_length=200)),
                ('endogene_investment_cost_storage', models.CharField(blank=True, max_length=200)),
                ('endogene_investment_cost_other', models.CharField(blank=True, max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Study',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_of_the_study', models.CharField(help_text='What is the name of the study?', max_length=1000, unique=True, verbose_name='Title')),
                ('subtitle', models.CharField(blank=True, max_length=1000, verbose_name='Subtitle')),
                ('abbreviation', models.CharField(blank=True, max_length=20, verbose_name='Abbreviation')),
                ('aim', models.TextField(blank=True, help_text='What is the purpose (hypothesis) and research question of the study?', max_length=1000, verbose_name='General Focus')),
                ('authors', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), blank=True, default=list, null=True, size=None)),
                ('contact_person', models.CharField(blank=True, max_length=200, verbose_name='Contact person')),
                ('contact_email', models.EmailField(blank=True, help_text='What is the e-mail contact of the developer (group)', max_length=254, verbose_name='Contact (e-mail)')),
                ('client', models.CharField(blank=True, help_text='Who are the customers requesting the study?', max_length=1000, verbose_name='Client')),
                ('funding_source', models.CharField(blank=True, max_length=100)),
                ('funding_contact', models.CharField(blank=True, help_text='Who is responsible for the funding sources?', max_length=100)),
                ('non_oep_data', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=200), blank=True, default=list, size=None)),
                ('citation_reference', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1000), blank=True, null=True, size=None, verbose_name='Citation reference')),
                ('citation_doi', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1000), blank=True, null=True, size=None, verbose_name='Citation doi')),
                ('oep_data', models.ManyToManyField(blank=True, to='dataedit.Table')),
                ('report', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='modelview.Publication')),
                ('scenarios', models.ManyToManyField(blank=True, to='modelview.Scenario')),
            ],
        ),
    ]
